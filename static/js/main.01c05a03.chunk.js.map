{"version":3,"sources":["Components/TodoItem.js","Common/Loader.js","Components/AddTodo.js","Components/Todo.js","Common/Header.js","pages/about.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","isDone","textDecoration","this","props","todoForItem","map","todo","key","_id","className","style","isdone","type","checked","onChange","markComplete","bind","name","onClick","delTodo","btnStyle","Component","background","color","border","paddingLeft","paddingRight","borderRadius","cursor","float","Loader","AddTodo","state","onChangeName","e","setState","target","value","onSubmitTodo","respBody","Axios","post","then","resp","alert","onSubmit","display","placeholder","flex","Todo","nodoTodoList","loading","viewTodoList","get","response","data","updateTodo","id","reqBody","patch","currentId","delete","getHeaderStyle","textAlign","padding","linkStyle","TextDecoder","Header","to","About","Fragment","App","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2OAEMA,G,kNACFC,SAAW,SAACC,GACR,MAAe,SAAXA,EACO,CACHC,eAAgB,gBAIb,CACHA,eAAgB,S,uDAIlB,IAAD,OAEL,OAAOC,KAAKC,MAAMC,YAAYC,KAAI,SAACC,GAAD,OAC9B,yBAAKC,IAAKD,EAAKE,IAAKC,UAAU,WAAWC,MAAO,EAAKX,SAASO,EAAKK,SAC/D,2BAAOC,KAAK,WAAWC,QAHZ,SAGqCP,EAAKK,OAASG,SAAU,EAAKX,MAAMY,aAAaC,KAAK,EAAMV,EAAKE,OAC/G,KAAMF,EAAKW,KACZ,4BAAQC,QAAS,EAAKf,MAAMgB,QAAQH,KAAK,EAAMV,EAAKE,KAAME,MAAOU,GAAjE,a,GAnBOC,cAyBjBD,EAAW,CACbE,WAAY,UACZC,MAAO,OACPC,OAAQ,OACRC,YAAa,MACbC,aAAc,MACdC,aAAc,MACdC,OAAQ,UACRC,MAAO,SAEI/B,I,iBC3BAgC,MARf,WACI,OACI,yBAAKrB,UAAU,iBACX,uBAAGA,UAAU,wBCgCVsB,E,4MAjCXC,MAAQ,CACJf,KAAM,I,EAGVgB,aAAe,SAACC,GAAD,OAAO,EAAKC,SAAS,CAAElB,KAAMiB,EAAEE,OAAOC,S,EAErDC,aAAe,SAACJ,GAGZ,IAAMK,EAAW,CACbtB,KAAM,EAAKe,MAAMf,KACjBN,OAAQ,SAGZ6B,IAAMC,KAAK,oFAAqFF,GAC3FG,MAAK,SAAAC,GACFC,MAAMD,O,uDAMd,OACI,0BAAME,SAAU3C,KAAKoC,aAAc5B,MAAO,CAAEoC,QAAS,SACjD,2BAAOlC,KAAK,OAAOK,KAAK,OAAO8B,YAAY,aACvCrC,MAAO,CAAEsC,KAAM,MAAQX,MAAOnC,KAAK8B,MAAMf,KAAMH,SAAUZ,KAAK+B,eAClE,2BAAOrB,KAAK,SAASyB,MAAM,WAAW5B,UAAU,MAAMC,MAAO,CAAEsC,KAAM,Y,GA5B/D3B,aCiFP4B,E,4MA3EXjB,MAAQ,CACJkB,aAAc,GACdC,SAAS,G,EAgBbC,aAAe,WACXZ,IAAMa,IAAI,uFAAuFX,MAAK,SAAAY,GAClG,EAAKnB,SAAS,CAAEe,aAAcI,EAASC,OACvC,EAAKpB,SAAS,CAAEgB,SAAS,Q,EAIjCK,WAAa,SAACC,EAAIC,GACdlB,IAAMmB,MAAN,+FAAoGF,GAAMC,GACrGhB,MAAK,SAAAC,GACF,EAAKS,mB,EAIjBrC,aAAe,SAAC0C,GACZ,IAAK,IAAInD,KAAQ,EAAK0B,MAAMkB,aAAc,CACtC,IAAIU,EAAY,EAAK5B,MAAMkB,aAAa5C,GAAME,IAC9C,GAAIoD,IAAcH,EAAI,CAClB,IAAIC,EAAU,GAEVA,EADyC,SAAzC,EAAK1B,MAAMkB,aAAa5C,GAAMK,OACpB,CAAEA,OAAQ,SAGV,CAAEA,OAAQ,QAExB,EAAK6C,WAAWI,EAAWF,M,EAKvCF,WAAa,SAACC,EAAIC,GACd,EAAKvB,SAAS,CAAEgB,SAAS,IACzBX,IAAMmB,MAAN,+FAAoGF,GAAMC,GACrGhB,MAAK,SAAAC,GACF,EAAKS,mB,EAIjBjC,QAAU,SAACsC,GACP,EAAKtB,SAAS,CAAEgB,SAAS,IACzBX,IAAMqB,OAAN,+FAAqGJ,IAChGf,MAAK,SAAAC,GACF,EAAKS,mB,kEA7CblD,KAAKkD,iB,+BAkDL,OAAIlD,KAAK8B,MAAMmB,QAAgB,kBAAC,EAAD,MAE3B,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAU/C,YAAaF,KAAK8B,MAAMkB,aAAcnC,aAAcb,KAAKa,aAAcI,QAASjB,KAAKiB,e,GAvE5FE,a,QCKnB,IAAMyC,EAAiB,CACnBxC,WAAY,UACZyC,UAAW,SACXC,QAAS,OACTzC,MAAO,QAGL0C,EAAY,CACd1C,MAAO,OACP2C,YAAa,QAEFC,EApBf,WACI,OACI,4BAAQzD,MAAOoD,GACX,4CACA,kBAAC,IAAD,CAAMpD,MAAOuD,EAAWG,GAAG,KAA3B,QAA0C,qCAC1C,kBAAC,IAAD,CAAM1D,MAAOuD,EAAWG,GAAG,UAA3B,WCOGC,MAXf,WACI,OACI,kBAAC,IAAMC,SAAP,KACI,6BACI,wCACA,0E,OCoBDC,E,uKAlBX,OACE,kBAAC,IAAD,KACE,yBAAK9D,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAO+D,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAAvE,GAAK,OACjC,kBAAC,IAAMmE,SAAP,KACE,kBAAC,EAAD,UAGJ,kBAAC,IAAD,CAAOG,KAAK,SAASE,UAAWN,W,GAb1BhD,aCKEuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.01c05a03.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass TodoItem extends Component {\r\n    getStyle = (isDone) => {\r\n        if (isDone === \"true\") {\r\n            return {\r\n                textDecoration: 'line-through'\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                textDecoration: 'none'\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        const alwaysTrue = 'true'\r\n        return this.props.todoForItem.map((todo) => (\r\n            <div key={todo._id} className='eachTodo' style={this.getStyle(todo.isdone)}>\r\n                <input type=\"checkbox\" checked={(alwaysTrue === todo.isdone)} onChange={this.props.markComplete.bind(this, todo._id)} />\r\n                {\"  \"}{todo.name}\r\n                <button onClick={this.props.delTodo.bind(this, todo._id)} style={btnStyle}>X</button>\r\n            </div>\r\n        ));\r\n    };\r\n}\r\n\r\nconst btnStyle = {\r\n    background: \"#ff0000\",\r\n    color: '#fff',\r\n    border: 'none',\r\n    paddingLeft: '5px',\r\n    paddingRight: '5px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\nexport default TodoItem;\r\n","import React from 'react';\r\n\r\nfunction Loader() {\r\n    return (\r\n        <div className=\"loader center\">\r\n            <i className=\"fa fa-cog fa-spin\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loader;\r\n","import React, { Component } from \"react\";\r\nimport Axios from 'axios';\r\nclass AddTodo extends Component {\r\n\r\n    state = {\r\n        name: ''\r\n    }\r\n\r\n    onChangeName = (e) => this.setState({ name: e.target.value })\r\n\r\n    onSubmitTodo = (e) => {\r\n        //alert(\"name : \" + this.state.name)\r\n        // const url = \"https://cors-anywhere.herokuapp.com/https://todo-node-mongo.herokuapp.com/addTodo\";\r\n        const respBody = {\r\n            name: this.state.name,\r\n            isdone: \"false\"\r\n        }\r\n        // alert(\"name : \" + this.state.name)\r\n        Axios.post('https://cors-anywhere.herokuapp.com/https://todo-node-mongo.herokuapp.com/addTodo', respBody)\r\n            .then(resp => {\r\n                alert(resp)\r\n                //this.viewTodoList();\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmitTodo} style={{ display: 'flex' }}>\r\n                <input type=\"text\" name=\"name\" placeholder=\"Enter Todo\"\r\n                    style={{ flex: '10' }} value={this.state.name} onChange={this.onChangeName} />\r\n                <input type=\"submit\" value=\"Add Todo\" className=\"btn\" style={{ flex: '1' }} />\r\n            </form>\r\n        )\r\n\r\n    };\r\n}\r\n\r\nexport default AddTodo;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from './TodoItem';\r\nimport Axios from 'axios';\r\nimport Loader from '../Common/Loader';\r\nimport AddTodo from '../Components/AddTodo';\r\n\r\nclass Todo extends Component {\r\n\r\n    state = {\r\n        nodoTodoList: [],\r\n        loading: true\r\n    }\r\n\r\n    /*  componentDidMount() {\r\n         console.log(\"called fetch\");\r\n         fetch('https://cors-anywhere.herokuapp.com/https://todo-node-mongo.herokuapp.com/viewTodos').then(response => {\r\n             return response.json();\r\n         })\r\n             .then(todoListRes => {\r\n                 this.setState({ nodoTodoList: todoListRes })\r\n             });\r\n     } */\r\n    componentDidMount() {\r\n        this.viewTodoList();\r\n    }\r\n\r\n    viewTodoList = () => {\r\n        Axios.get('https://cors-anywhere.herokuapp.com/https://todo-node-mongo.herokuapp.com/viewTodos').then(response => {\r\n            this.setState({ nodoTodoList: response.data })\r\n            this.setState({ loading: false })\r\n        });\r\n    }\r\n\r\n    updateTodo = (id, reqBody) => {\r\n        Axios.patch(`https://cors-anywhere.herokuapp.com/https://todo-node-mongo.herokuapp.com/updateTodo/${id}`, reqBody)\r\n            .then(resp => {\r\n                this.viewTodoList();\r\n            });\r\n    }\r\n\r\n    markComplete = (id) => {\r\n        for (var todo in this.state.nodoTodoList) {\r\n            var currentId = this.state.nodoTodoList[todo]._id;\r\n            if (currentId === id) {\r\n                var reqBody = {};\r\n                if (this.state.nodoTodoList[todo].isdone === \"true\") {\r\n                    reqBody = { isdone: \"false\" }\r\n                }\r\n                else {\r\n                    reqBody = { isdone: \"true\" }\r\n                }\r\n                this.updateTodo(currentId, reqBody);\r\n            }\r\n        }\r\n    }\r\n\r\n    updateTodo = (id, reqBody) => {\r\n        this.setState({ loading: true })\r\n        Axios.patch(`https://cors-anywhere.herokuapp.com/https://todo-node-mongo.herokuapp.com/updateTodo/${id}`, reqBody)\r\n            .then(resp => {\r\n                this.viewTodoList();\r\n            });\r\n    }\r\n\r\n    delTodo = (id) => {\r\n        this.setState({ loading: true })\r\n        Axios.delete(`https://cors-anywhere.herokuapp.com/https://todo-node-mongo.herokuapp.com/deleteTodo/${id}`)\r\n            .then(resp => {\r\n                this.viewTodoList();\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loading) return <Loader />;\r\n        return (\r\n            <div>\r\n                <AddTodo />\r\n                <TodoItem todoForItem={this.state.nodoTodoList} markComplete={this.markComplete} delTodo={this.delTodo} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Todo;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\nfunction Header() {\r\n    return (\r\n        <header style={getHeaderStyle}>\r\n            <h1>AMR TODO APP</h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link><span> | </span>\r\n            <Link style={linkStyle} to=\"/about\">about</Link>\r\n        </header>\r\n    );\r\n}\r\nconst getHeaderStyle = {\r\n    background: '#007bff',\r\n    textAlign: 'center',\r\n    padding: '10px',\r\n    color: '#fff'\r\n}\r\n\r\nconst linkStyle = {\r\n    color: \"#fff\",\r\n    TextDecoder: 'none'\r\n}\r\nexport default Header;\r\n","import React from 'react';\r\n\r\n\r\nfunction About() {\r\n    return (\r\n        <React.Fragment>\r\n            <div>\r\n                <h1>About : </h1>\r\n                <p> It's a Todo list Application. (V 1.0.0)</p>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Todos from './Components/Todo';\nimport Header from './Common/Header';\nimport About from './pages/about';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    /* if (this.state.loading) return <Loader />; */\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/\" render={props => (\n              <React.Fragment>\n                <Todos />\n              </React.Fragment>\n            )} />\n            <Route path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}